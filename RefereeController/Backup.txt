// ====== START CONFIG SECTION ======================================================

#include "secrets_local.h"
#include <Arduino.h>

const int referee = 1;
const char* platform = "A";

//______Allocate Pins___________________________________________
int decisionPins[] = {14, 27};
int ledPins[] = {15};
int hapticPins[] = {4, 18};

//For battery and connection indicators
int batteryPins[] = {16, 17, 22, 23};
int connectionPins[] = {13, 12}; //first pin for Wifi, second pin for MQTT server

//______Battery Percentage Variables___________________________________________

#define BATTERY_ADC_PIN 35
#define MONITOR_ADC_PIN 39

#define VOLTAGE_25 3.3
#define VOLTAGE_50 3.6
#define VOLTAGE_75 3.9
#define VOLTAGE_100 4.2

#define FLASH_INTERVAL 500
#define HYSTERESIS 0.1
#define NUM_READINGS 10


// ====== END CONFIG SECTION ======================================================

#ifdef TLS
#include <WiFiClientSecure.h>
#include "certificates.h"
const int mqttPort = 8883;
#else
#include <WiFi.h>
const int mqttPort = 1883;
#endif

#include "PubSubClient.h"

#define ELEMENTCOUNT(x)  (sizeof(x) / sizeof(x[0]))

#ifdef TLS
WiFiClientSecure wifiClient;
#else
WiFiClient wifiClient;
#endif
PubSubClient mqttClient;

String macAddress;
char mac[50];
char clientId[50];

char fop[20];
int ref13Number = 0;

int prevDecisionPinState[] = {-1, -1, -1, -1, -1, -1};
int ledStartedMillis[] = {0, 0, 0};
int ledDuration[] = {0, 0, 0};


void setup() {

  setupPins();
  xTaskCreatePinnedToCore(
    batteryMonitoringTask, // Task function
    "Battery Monitor",     // Name of the task
    2048,                  // Stack size
    NULL,                  // Task input parameter
    1,                     // Task priority
    NULL,                  // Task handle
    1                      // Core to run the task on
  );

  #ifdef TLS
    wifiClient.setCACert(rootCABuff);
    wifiClient.setInsecure();
  #endif
  mqttClient.setKeepAlive(20);
  mqttClient.setClient(wifiClient);
  Serial.begin(115200);

  wifiConnect();
  macAddress = WiFi.macAddress();
  macAddress.toCharArray(clientId, macAddress.length() + 1);

  Serial.print("MQTT server: ");
  Serial.println(mqttServer);
  mqttClient.setServer(mqttServer, mqttPort);
  mqttClient.setCallback(callback);

  strcpy(fop, platform);
  mqttReconnect();
}

void loop() {
  delay(10);
  if (!mqttClient.connected()) {
    mqttReconnect();
    digitalWrite(connectionPins[1], LOW);
  }
  mqttClient.loop();
  buttonLoop();
  //buzzerLoop();
  ledLoop();
}

void wifiConnect() {
  Serial.print("Connecting to WiFi ");
  Serial.print(wifiSSID);
  WiFi.mode(WIFI_STA);
  WiFi.begin(wifiSSID, wifiPassword);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" connected");
  digitalWrite(connectionPins[0], HIGH);
}

void mqttReconnect() {
  long r = random(1000);
  sprintf(clientId, "owlcms-%ld", r);
  if (WiFi.status() != WL_CONNECTED) {
    wifiConnect();
  }
  while (!mqttClient.connected()) {
    digitalWrite(connectionPins[1], LOW);
    
    Serial.print(macAddress);
    Serial.print(" connecting to MQTT server...");

    if (mqttClient.connect(clientId, mqttUserName, mqttPassword)) {
      Serial.println(" connected");
      digitalWrite(connectionPins[1], HIGH);
      char requestTopic[50];
      sprintf(requestTopic, "owlcms/decisionRequest/%s/+", fop);
      mqttClient.subscribe(requestTopic);

      char ledTopic[50];
      sprintf(ledTopic, "owlcms/led/#", fop);
      mqttClient.subscribe(ledTopic);

      char summonTopic[50];
      sprintf(summonTopic, "owlcms/summon/#", fop);
      mqttClient.subscribe(summonTopic);

      char resetTopic[50];
      sprintf(resetTopic, "owlcms/reset/");
      mqttClient.subscribe(resetTopic);

    } else {
      Serial.print("MQTT connection failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" try again in 5 second");
      delay(5000);
    }
  }
}

void setupPins() {
  for (int j = 0; j < ELEMENTCOUNT(connectionPins); j++) {
    pinMode(connectionPins[j], OUTPUT);
  }
  for (int j = 0; j < ELEMENTCOUNT(decisionPins); j++) {
    pinMode(decisionPins[j], INPUT_PULLUP);
    prevDecisionPinState[j] = digitalRead(decisionPins[j]);
  }
  for (int j = 0; j < ELEMENTCOUNT(ledPins); j++) {
    pinMode(ledPins[j], OUTPUT);
  }
  for (int j = 0; j < ELEMENTCOUNT(batteryPins); j++) {
    pinMode(batteryPins[j], OUTPUT);
    digitalWrite(batteryPins[j], LOW);
  }
  for (int j = 0; j < ELEMENTCOUNT(hapticPins); j++) {
    pinMode(hapticPins[j], OUTPUT);
    digitalWrite(hapticPins[j], LOW);
  }
}

void buttonLoop() {
    for (int j = 0; j < ELEMENTCOUNT(decisionPins); j++) {
    int state = digitalRead(decisionPins[j]);
    int prevState = prevDecisionPinState[j];
    if (state != prevState) {
      prevDecisionPinState[j] = state;
      if (state == LOW) {
        if (j % 2 == 0) {
          sendDecision(j / 2, "good");
        } else {
          sendDecision(j / 2, "bad");
        }
        return;
      }
    }
  }
}

void ledLoop() {
  for (int j = 0; j < ELEMENTCOUNT(ledStartedMillis); j++) {
    if (ledStartedMillis[j] > 0) {
      ;
      if (millis() - ledStartedMillis[j] >= ledDuration[j]) {
        digitalWrite(ledPins[j], LOW);
        digitalWrite(hapticPins[j], LOW);
        ledStartedMillis[j] = 0;
      }
    }
  }
}

void batteryMonitoringTask(void *parameter) {
  bool flashState = LOW;        // State for flashing the active LED
  unsigned long lastFlashTime = 0; // Tracks the last time the active LED was toggled

  float voltageReadings[NUM_READINGS] = {0}; // Array to store voltage readings
  int currentReadingIndex = 0;              // Index for circular buffer

  while (true) {
    voltageReadings[currentReadingIndex] = getBatteryVoltage();
    currentReadingIndex = (currentReadingIndex + 1) % NUM_READINGS;

     float averageVoltage = calculateAverage(voltageReadings, NUM_READINGS);
    //float batteryVoltage = getBatteryVoltage();
     // Print the battery voltage for debugging
    //Serial.print("Averaged Voltage: ");
    //Serial.println(averageVoltage);

    // Determine which LED should flash based on voltage
    int activeLED = getActiveLED(averageVoltage);

    // Update LEDs
    updateBatteryLEDs(averageVoltage, activeLED, flashState);

    // Handle flashing logic for the active LED
    unsigned long currentTime = millis();
    if (currentTime - lastFlashTime >= FLASH_INTERVAL) {
      lastFlashTime = currentTime;
      flashState = !flashState; // Toggle the flashing state
    }

    // Delay to allow other tasks to run
    vTaskDelay(pdMS_TO_TICKS(100)); // 100 ms delay
  }
}

int getActiveLED(float voltage) {
  if (voltage >= VOLTAGE_100 - HYSTERESIS) return batteryPins[3];
  if (voltage >= VOLTAGE_75 - HYSTERESIS) return batteryPins[2];
  if (voltage >= VOLTAGE_50 - HYSTERESIS) return batteryPins[1];
  if (voltage >= VOLTAGE_25 - HYSTERESIS) return batteryPins[0];
  return -1; // No LED if voltage is below all thresholds
}

float calculateAverage(float *values, int length) {
  float sum = 0;
  for (int i = 0; i < length; i++) {
    sum += values[i];
  }
  return sum / length;
}

float getBatteryVoltage() {
  int adcValue = analogRead(BATTERY_ADC_PIN); // Read ADC value
  float voltage = (adcValue / 4095.0) * 3.3 * 2; // Adjust for ADC range and voltage divider
  return voltage;
}


void updateBatteryLEDs(float voltage, int activeLED, bool flashState) {
  int adcChargeValue = analogRead(MONITOR_ADC_PIN);
  if (adcChargeValue >1000) {
    digitalWrite(batteryPins[0], voltage >= VOLTAGE_25 ? HIGH : LOW);
    digitalWrite(batteryPins[1], voltage >= VOLTAGE_50 ? HIGH : LOW);
    digitalWrite(batteryPins[2], voltage >= VOLTAGE_75 ? HIGH : LOW);
    digitalWrite(batteryPins[3], voltage >= VOLTAGE_100 ? HIGH : LOW);

    // Flash the active LED
    if (activeLED != -1) {
      digitalWrite(activeLED, flashState ? HIGH : LOW);
    }

    // Ensure higher LEDs remain off
    if (activeLED == batteryPins[0]) {
      digitalWrite(batteryPins[1], LOW);
      digitalWrite(batteryPins[2], LOW);
      digitalWrite(batteryPins[3], LOW);
    } else if (activeLED == batteryPins[1]) {
      digitalWrite(batteryPins[2], LOW);
      digitalWrite(batteryPins[3], LOW);
    } else if (activeLED == batteryPins[2]) {
      digitalWrite(batteryPins[3], LOW);
    }
  } else {
    digitalWrite(batteryPins[0], voltage >= VOLTAGE_25 ? HIGH : LOW);
    digitalWrite(batteryPins[1], voltage >= VOLTAGE_50 ? HIGH : LOW);
    digitalWrite(batteryPins[2], voltage >= VOLTAGE_75 ? HIGH : LOW);
    digitalWrite(batteryPins[3], voltage >= VOLTAGE_100 ? HIGH : LOW);
  }
}

void sendDecision(int ref02Number, const char* decision) {
  if (referee > 0) {
    ref02Number = referee - 1;
  }

  digitalWrite(ledPins[0], HIGH);

  char topic[50];
  sprintf(topic, "owlcms/decision/%s", fop);
  char message[32];
  sprintf(message, "%i %s", ref02Number + 1, decision);

  mqttClient.publish(topic, message);
  Serial.print(topic);  Serial.print(" ");  Serial.print(message);  Serial.println(" sent.");
}

String decisionRequestTopic = String("owlcms/decisionRequest/") + fop;
String summonTopic = String("owlcms/summon/") + fop;
String ledTopic = String("owlcms/led/") + fop;
String resetTopic = String("owlcms/reset/");

void callback(char* topic, byte* message, unsigned int length) {

  String stTopic = String(topic);
  Serial.print("Message arrived on topic: ");  Serial.print(stTopic);  Serial.print("; Message: ");

  String stMessage;
  for (int i = 0; i < length; i++) {
    stMessage += (char)message[i];
  }
  Serial.println(stMessage);

  int refIndex = stTopic.lastIndexOf("/") + 1;
  String refString = stTopic.substring(refIndex);
  int ref13Number = refString.toInt();

  if (stTopic.startsWith(decisionRequestTopic)) {
    Serial.print(decisionRequestTopic);
    changeReminderStatus(ref13Number - 1, stMessage.startsWith("on"));
  } else if (stTopic.startsWith(summonTopic)) {
    if (ref13Number == 0) {
      for (int j = 0; j < ELEMENTCOUNT(ledPins); j++) {
        changeSummonStatus(j, stMessage.startsWith("on"));
      }
    } else {
      changeSummonStatus(ref13Number - 1, stMessage.startsWith("on"));
    }
  } else if (stTopic.startsWith(ledTopic)) {
    if (ref13Number == 0) {
      for (int j = 0; j < ELEMENTCOUNT(ledPins); j++) {
        changeSummonStatus(j, stMessage.startsWith("on"));
      }
    } else {
      changeSummonStatus(ref13Number - 1, stMessage.startsWith("on"));
    }
  } else if (stTopic.startsWith(resetTopic)) {
    digitalWrite(ledPins[0], LOW);
  }
}

void changeReminderStatus(int ref02Number, boolean warn) {
  Serial.print("reminder "); Serial.print(warn); Serial.print(" "); Serial.println(ref02Number+1);
  if (warn) {
    digitalWrite(ledPins[0], HIGH);
    digitalWrite(hapticPins[ref02Number], HIGH);
  } else {
    digitalWrite(ledPins[0], LOW);
    digitalWrite(hapticPins[ref02Number], LOW);
    }
}

void changeSummonStatus(int ref02Number, boolean warn) {
  Serial.print("summon ");  Serial.print(warn); Serial.print(" "); Serial.println(ref02Number+1);
  if (warn) {
    digitalWrite(ledPins[0], HIGH);
    digitalWrite(hapticPins[ref02Number], HIGH);
  } else {
    digitalWrite(ledPins[0], LOW);
    digitalWrite(hapticPins[ref02Number], LOW);
  }
}